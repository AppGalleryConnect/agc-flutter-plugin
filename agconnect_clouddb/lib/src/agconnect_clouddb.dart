/*
 * Copyright 2020-2023. Huawei Technologies Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

part of agconnect_clouddb;

class AGConnectCloudDB {
  static AGConnectCloudDB? _instance;
  static AGConnectCloudDB getInstance() {
    return (_instance ??= const AGConnectCloudDB._());
  }

  const AGConnectCloudDB._();

  /// You should call this method before calling all other methods.
  Future<void> initialize() async {
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.INITIALIZE,
        <String, dynamic>{},
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// This method is called to create or modify an object type,
  /// define a set of storage objects, and store data generated by the application.
  Future<void> createObjectType() async {
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.CREATE_OBJECT_TYPE,
        <String, dynamic>{},
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// You can call this method to obtain all CloudDBZoneConfig lists on the device.
  Future<List<AGConnectCloudDBZoneConfig>> getCloudDBZoneConfigs() async {
    try {
      final List<dynamic>? result =
          await _methodChannel.invokeMethod<List<dynamic>?>(
        _MethodConstants.GET_CLOUD_DB_ZONE_CONFIGS,
        <String, dynamic>{},
      );
      return (result ?? <dynamic>[]).map((dynamic i) {
        return AGConnectCloudDBZoneConfig._fromMap(
          Map<String, dynamic>.from((i as Map<dynamic, dynamic>)),
        );
      }).toList();
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// You can invoke this API to create or open an object of a Cloud DB zone on the device.
  /// An object of a Cloud DB zone represents a unique data storage zone.
  /// An application supports a **maximum of 4 Cloud DB** zone on the device.
  ///
  /// You can open a Cloud DB zone for multiple times, but need to close the Cloud DB zone
  /// after the operation is complete. That is, opening a Cloud DB zone
  /// must be followed by a closing operation. Otherwise, an exception is thrown during deletion.
  ///
  /// When you use the Cloud DB zone config object to open an existing Cloud DB zone,
  /// ensure that the properties specified in Cloud DB zone config are
  /// the same as those of the existing Cloud DB zone.
  /// If they are different, the system throws an exception.
  ///
  /// **isAllowToCreate**
  /// * **true**: If the Cloud DB zone exists in the CloudDBZoneConfig object,
  ///     open the existing Cloud DB zone. If the Cloud DB zone does not exist
  ///     in the Cloud DB zone config object, create an Cloud DB zone object.
  /// * **false**: Open an existing Cloud DB zone. If no Cloud DB zone exists, an exception is thrown.
  Future<AGConnectCloudDBZone> openCloudDBZone({
    required AGConnectCloudDBZoneConfig zoneConfig,
    bool isAllowToCreate = true,
  }) async {
    try {
      final Map<dynamic, dynamic>? result =
          await _methodChannel.invokeMethod<Map<dynamic, dynamic>?>(
        _MethodConstants.OPEN_CLOUD_DB_ZONE,
        <String, dynamic>{
          _KeyConstants.ZONE_CONFIG: zoneConfig._toMap(),
          _KeyConstants.IS_ALLOW_TO_CREATE: isAllowToCreate,
        },
      );
      return AGConnectCloudDBZone._(
          Map<String, dynamic>.from(result!)[_KeyConstants.ZONE_ID]);
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// You can invoke this API to create or open an object of a Cloud DB zone on the device.
  /// An object of a Cloud DB zone represents a unique data storage zone.
  /// An application supports a **maximum of 4 Cloud DB** zone on the device.
  ///
  /// You can open a Cloud DB zone for multiple times, but need to close the Cloud DB zone
  /// after the operation is complete. That is, opening a Cloud DB zone
  /// must be followed by a closing operation. Otherwise, an exception is thrown during deletion.
  ///
  /// When you use the Cloud DB zone config object to open an existing Cloud DB zone,
  /// ensure that the properties specified in Cloud DB zone config are
  /// the same as those of the existing Cloud DB zone.
  /// If they are different, the system throws an exception.
  ///
  /// **isAllowToCreate**
  /// * **true**: If the Cloud DB zone exists in the CloudDBZoneConfig object,
  ///     open the existing Cloud DB zone. If the Cloud DB zone does not exist
  ///     in the Cloud DB zone config object, create an Cloud DB zone object.
  /// * **false**: Open an existing Cloud DB zone. If no Cloud DB zone exists, an exception is thrown.
  Future<AGConnectCloudDBZone> openCloudDBZone2({
    required AGConnectCloudDBZoneConfig zoneConfig,
    bool isAllowToCreate = true,
  }) async {
    try {
      final Map<dynamic, dynamic>? result =
          await _methodChannel.invokeMethod<Map<dynamic, dynamic>?>(
        _MethodConstants.OPEN_CLOUD_DB_ZONE_2,
        <String, dynamic>{
          _KeyConstants.ZONE_CONFIG: zoneConfig._toMap(),
          _KeyConstants.IS_ALLOW_TO_CREATE: isAllowToCreate,
        },
      );
      return AGConnectCloudDBZone._(
          Map<String, dynamic>.from(result!)[_KeyConstants.ZONE_ID]);
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// You can invoke this method to close one Cloud DB zone object opened on the device.
  ///
  /// Before using this method to close a Cloud DB zone, ensure that
  /// the data write, delete, query, and snapshot listening operations
  /// based on the Cloud DB zone have been completed.
  ///
  /// After using Cloud DB zone to add, delete, modify, or query data,
  /// you can determine whether to close the Cloud DB zone to release resources
  /// occupied by Cloud DB zone. Closing Cloud DB zone does not delete underlying data files.
  /// If you attempt to close an inexistent Cloud DB zone or repeatedly close Cloud DB zone,
  /// the system returns a success message and does not report any exception.
  Future<void> closeCloudDBZone({
    required AGConnectCloudDBZone zone,
  }) async {
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.CLOSE_CLOUD_DB_ZONE,
        <String, dynamic>{
          _KeyConstants.ZONE_ID: zone._id,
        },
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// You can invoke this method to delete a Cloud DB zone object that is no longer
  /// used on the device. You can delete Cloud DB zone only after Cloud DB zone is closed.
  ///
  /// If you no longer need Cloud DB zone and its data, you can call this method
  /// to delete Cloud DB zone. After Cloud DB zone is deleted,
  /// the data files stored on the disk are deleted when the memory resources are released.
  /// If you attempt to repeatedly delete Cloud DB zone or delete an inexistent Cloud DB zone,
  /// the system returns a success message without exception.
  Future<void> deleteCloudDBZone({
    required String zoneName,
  }) async {
    if (zoneName.isEmpty) {
      throw FormatException('zoneName cannot be an empty string.', zoneName);
    }
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.DELETE_CLOUD_DB_ZONE,
        <String, dynamic>{
          _KeyConstants.ZONE_NAME: zoneName,
        },
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// You can invoke this method to open the data synchronization on the local device.
  /// Data can be synchronized between the device and the cloud only after data synchronization is enabled.
  ///
  /// After AGConnectCloudDB initialization, device-cloud data synchronization of
  /// all Cloud DB zone is opened by default and does not need to be explicitly
  /// invoked by applications. Generally, you can invoke this method when you use Wi-Fi
  /// and the network status is good. If you use the mobile data network to invoke this API,
  /// the specific operation depends on your network authorization.
  /// After the data synchronization function is opened on the local device,
  /// the device checks whether there is any data that is not synchronized.
  /// If there is any data that is not synchronized, the device-cloud data synchronization is triggered.
  Future<void> enableNetwork({
    required String zoneName,
  }) async {
    if (zoneName.isEmpty) {
      throw FormatException('zoneName cannot be an empty string.', zoneName);
    }
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.ENABLE_NETWORK,
        <String, dynamic>{
          _KeyConstants.ZONE_NAME: zoneName,
        },
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// You can invoke this method to disable the data synchronization on the local device.
  /// After data synchronization is disabled, data will not be synchronized between the device and the cloud.
  ///
  /// Data synchronization only controls whether to synchronize data for a single Cloud DB zone.
  /// The AGConnectCloudDB connection to the cloud is disconnected and data synchronization
  /// stops only after data synchronization is disabled for all Cloud DB zone.
  /// The synchronization function is not permanently disabled.
  /// The synchronization function is enabled by default when
  /// the application is opened again every time. Generally, the application
  /// invokes this API when detecting that the user uses a mobile data network
  /// (for example, a 4G network), so as to avoid using mobile data traffic
  /// of the user during data synchronization.
  /// Whether to disable the function depends on your network authorization.
  Future<void> disableNetwork({
    required String zoneName,
  }) async {
    if (zoneName.isEmpty) {
      throw FormatException('zoneName cannot be an empty string.', zoneName);
    }
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.DISABLE_NETWORK,
        <String, dynamic>{
          _KeyConstants.ZONE_NAME: zoneName,
        },
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// This method is called to set or modify the user password for Cloud DB full encryption.
  /// For the cache mode, you are advised to enable local database encryption on the device
  /// to ensure local data security. If the object type you create on
  /// the AppGallery Connect console contains encrypted fields but
  /// you do not use setUserKey() to set the user password, the data of this object type
  /// cannot be synchronized to the cloud and you cannot perform operations
  /// on the data of this object type on the cloud.
  ///
  /// **The options are as follows:**
  ///
  /// * If the value of userKey is NOT an **empty string** and
  ///   the value of userReKey is an **empty string**,
  ///   set full encryption for Cloud DB.
  /// * If the value of userKey is NOT an **empty string** and
  ///   the value of userReKey is NOT an **empty string**,
  ///   change the original full encryption password to a new one for Cloud DB.
  /// * If the value of userKey is an **empty string**,
  ///   the input parameter is invalid and the system will report an error.
  ///
  /// **userKey**
  ///   * User password, which is a string of 8 to 32 characters and can contain
  ///     only digits, lowercase letters, uppercase letters, spaces, and special characters.
  ///
  /// **userReKey**
  ///   * New user password, which is a string of 8 to 32 characters and can contain
  ///     only digits, lowercase letters, uppercase letters, spaces, and special characters.
  ///   * This parameter is required when the password is changed.
  ///
  /// **needStrongCheck**
  ///   * Determines whether to enable strong password verification. The rules for setting strong
  ///     or weak verification are as follows:
  ///     Weak verification: User password is a string of 6 to 32 characters
  ///     and can contain only digits, lowercase letters, uppercase letters, spaces, and special characters
  ///     Strong verification: User password is a string of 8 to 32 characters and
  ///     must contain at least two types of the following: digits, lowercase letters, uppercase letters,
  ///     spaces, and special characters
  ///
  /// https://developer.huawei.com/consumer/en/doc/development/AppGallery-connect-References/clouddb-agconnectclouddb#Specialcharacters
  Future<void> setUserKey({
    String userKey = '',
    String userReKey = '',
    bool needStrongCheck = false
  }) async {
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.SET_USER_KEY,
        <String, dynamic>{
          _KeyConstants.USER_KEY: userKey,
          _KeyConstants.USER_RE_KEY: userReKey,
          _KeyConstants.NEED_STRONG_CHECK: needStrongCheck,
        },
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// A data key used to encrypt user data and are automatically generated by the system.
  /// To prevent from being cracked when using one key for a long time,
  /// you can call this method to update the data key.
  Future<void> updateDataEncryptionKey() async {
    try {
      return await _methodChannel.invokeMethod<void>(
        _MethodConstants.UPDATE_DATA_ENCRYPTION_KEY,
        <String, dynamic>{},
      );
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// This method is called to register a listener for data key changes.
  ///
  /// If the data key of one device is updated for a user with multiple devices,
  /// the cloud will notify the user to update data keys on other devices.
  Stream<bool?> onDataEncryptionKeyChanged() {
    try {
      return _onDataEncryptionKeyChangeEventChannel
          .receiveBroadcastStream()
          .map((dynamic s) {
        return s is bool ? s : null;
      });
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }

  /// This method is called to register the listener events.
  ///
  /// **Events:**
  ///
  /// * USER_KEY_CHANGED:
  ///
  ///   If a user has multiple devices and changes the password on one online device,
  ///   the cloud notifies other online devices of the password change.
  Stream<String?> onEvent() {
    try {
      return _onEventEventChannel.receiveBroadcastStream().map((dynamic s) {
        return s is String ? s : null;
      });
    } catch (e) {
      throw AGConnectCloudDBException._from(e);
    }
  }
}
